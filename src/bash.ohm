Bash {
  Script
      = (Shebang "\n")? allwhitespace* ScriptCode?
  ScriptCode = Cmd | NullCmd
  Shebang = "#!" (~"sh" any)* "sh"
  Cmd = SequenceCmd
      | NoSemicolonCmd
      | PipeCmd
      | Assignment
      | SimpleCmd

  NoSemicolonCmd
      = IfCommand
      | comment
      | ForCommand
      | WhileCommand
      | CmdWithComment

  BlockedCmd (a command that can appear inside a block)
      = comment
      /* = IfCommand */
      /* | ForCommand */
      /* | WhileCommand */
      /* | CmdWithComment */
      /* | PipeCmd */
      /* | Assignment */
      | SimpleCmd

  IfCommand
      = IfCase ElseIfThen* ElseCase? EndIf

  IfCase
      = ifwithspace Conditional semicolon thenwithspace BlockedCmd
  ElseIfThen
      = semicolon elifwithspace Conditional semicolon thenwithspace SimpleCmd
  ElseCase
      = semicolon elsewithspace SimpleCmd
  EndIf = semicolon "fi"

  Conditional
      = TestCmd   -- test
      | SimpleCmd -- cmd

  ForCommand
      = ForControl Done

  ForControl
      = "for" "((" ControlStruct "))" semicolon dowithspace SimpleCmd -- c_style
      | "for" id "in" Call semicolon dowithspace SimpleCmd -- for_each

  ControlStruct
      = Assignment ";" id BinaryOp Bashword ";" (~")" Bashword)

  WhileCommand
      = WhileControl Done

  WhileControl
      = whilewithspace Conditional semicolon dowithspace SimpleCmd

  whilewithspace = "while" space+
  dowithspace = "do" allwhitespace+

  Done = semicolon "done"

  BinaryOp (Binary operator)
      = Equal | NotEqual | LessThan | GreaterThan | LessThanEq | GreaterThanEq
  Equal         = "==" | "=" | "-eq"
  NotEqual      = "!=" | "-ne"
  LessThan      = "-lt" | "<"
  GreaterThan   = "-gt" | ">"
  LessThanEq    = "-le" | "<="
  GreaterThanEq = "-ge" | ">="

  UnaryOp (Unary operator)
      = "-z" | "-n" | "-b" | "-c" | "-d" | "-e" | "-f" | "-L" | "-p" | "-S"

  ifwithspace   = "if"   allwhitespace+
  elifwithspace = "elif" allwhitespace+
  elsewithspace = "else" allwhitespace+
  thenwithspace = "then" allwhitespace+

  SequenceCmd
      = NoSemicolonCmd semicolon Cmd -- nosemicolon
      | Cmd semicolon Cmd -- std
      | NoSemicolonCmd semicolon -- noscNull
      | Cmd semicolon -- null

  PipeCmd = Cmd "|" allwhitespace* Cmd

  CmdWithComment
      = SimpleCmd comment

  SimpleCmd
      = SimpleCmdBase Redirect*

  Redirect
      = ">" Bashword
      | ">>" Bashword

  SimpleCmdBase
      = BasicCmd
      | CdCmd
      | PwdCmd
      | LsCmd
      | FindCmd
      | CatCmd
      | WhichCmd
      | TestCmd
      | EchoCmd
      | PushdCmd
      | PopdCmd
      | DirsCmd
      | LnCmd
      | ExitCmd
      | ChmodCmd
      | TouchCmd
      | SetCmd
      | SedCmd
      | ExecCmd

  BasicCmd = BasicName options? Bashword+
  CdCmd    = "cd" Bashword?
  PwdCmd   = "pwd"

  TestCmd
      = "test " "!"? UnaryOp Bashword               -- unary
      | "test " "!"? Bashword BinaryOp Bashword     -- binary
      | TestCmd_unaryBracket
      | TestCmd_binaryBracket
  TestCmd_unaryBracket
      = "[[" "!"? UnaryOp Bashword "]]"
      | "[" "!"? UnaryOp Bashword "]"
  TestCmd_binaryBracket
      = "[[" "!"? Bashword BinaryOp Bashword "]]"
      | "[" "!"? Bashword BinaryOp Bashword "]"

  FindCmd  = "find "  Bashword+
  LsCmd    = "ls"     options? Bashword*
  CatCmd   = "cat"    Bashword*
  WhichCmd = "which " Bashword
  EchoCmd  = "echo"   Bashword*
  PushdCmd = "pushd"  options? Bashword?
  PopdCmd  = "popd"   options? Bashword?
  DirsCmd  = "dirs"   (options | Bashword)?
  LnCmd    = "ln "    options? Bashword Bashword
  ExitCmd  = "exit"   ("-"? digit+)?
  ChmodCmd = "chmod " Bashword Bashword
  TouchCmd = "touch " options? Bashword
  SetCmd   = "set "   modOptions
  SedCmd   = "sed "   sedRegex Bashword*
  ExecCmd  = CmdName Arglist

  sedRegex
      = "'s/" (~"/" ~"'" any)* "/" (~"/" ~"'" any)* ("/" "g"?)? "'"
      | "\"s/" (~"/" ~"\"" any)* "/" (~"/" ~"\"" any)* ("/" "g"?)? "\""
  BasicName
      = "cp "
      | "rm "
      | "mkdir "
      | "mv "
      | "grep "

  CmdName = (~keyword Bashword)
  Arglist = Bashword*
  NullCmd = ""
  comment = space* "#" (~"\n" any)*
  options = "-" letter+
  modOptions = ("-" |"+" ) letter+

  Bashword
      = Call
      | stringLiteral
      | number
      | bareWord

  Call
      = "$(" Cmd ")"
      | "\"$(" Cmd ")\""
      | "`" Cmd "`"
      | "\"`" Cmd "`\""

  reference
      = "${" id "}" -- wrapped
      | "$" id -- simple

  number
      = digit+

  bareWord
      = (~badchars (reference | any))+

  keyword
      = keywordRoot ~alnum

  keywordRoot
      = "if" | "then" | "else" | "elif" | "fi" | "for" | "done" | "do"

  stringLiteral
      = singleString
      | doubleString

  singleString = "'" notSingleQuote* "'"
  doubleString = "\"" notDoubleQuote* "\""

  notSingleQuote
      = (~("'" | "\\") any)
      | "\\" any -- escape

  notDoubleQuote
      = (~("\"" | "\\") (reference | any))
      | "\\" any -- escape

  badchars = allwhitespace | "|" | ";" | ">" | "#" | "'" | "\"" | "`" | "(" | ")"
  Assignment
      = ("local " | "readonly " | "export ")? idEqual Bashword?
  idEqual = id "="
  id = (~keyword (alnum | "_")+) | "?"
  space := " " | "\t"
  allwhitespace = space | "\n"
  semicolon = (";" | "\n")+
}
